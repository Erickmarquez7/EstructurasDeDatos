//Erick Bernal Márquez        317042522
//Practica 3                  Nov/2020

package fciencias.edatos.practica03;
import java.io.Serializable;
import java.util.NoSuchElementException;

public class Lista<T>{
/**
     * Clase interna para nodos.
     */
    public class Nodo {

        /* El elemento del nodo. */
        T elemento;
        /* El nodo anterior. */
        Nodo anterior;
        /* El nodo siguiente. */
        Nodo siguiente;

        /* Construye un nodo con un elemento. */
        private Nodo(T elemento) {
            this.elemento = elemento;
        }

        /**
         * Regresa el nodo anterior del nodo.
         * @return el nodo anterior del nodo.
         */
        public Nodo getAnterior() {
            return anterior;
        }

        /**
         * Regresa el nodo siguiente del nodo.
         * @return el nodo siguiente del nodo.
         */
        public Nodo getSiguiente() {
            return siguiente;
        }

        /**
         * Regresa el elemento del nodo.
         * @return el elemento del nodo.
         */
        public T get() {
            return elemento;
        }
    }
    

    /* Primer elemento de la lista. */
    private Nodo cabeza;
    /* Último elemento de la lista. */
    private Nodo rabo;
    /* Número de elementos en la lista. */
    private int longitud;

    /**
     * Regresa la longitud de la lista.
     * @return la longitud de la lista, el número de elementos que contiene.
     */
    public int getLongitud() {
        return longitud;
    }

    /**
     * Nos dice si la lista es vacía.
     * @return <code>true</code> si la lista es vacía, <code>false</code> en
     *         otro caso.
     */
    public boolean esVacia() {
        return longitud == 0;
    }
    
    /**
     * Regresa el <em>i</em>-ésimo elemento de la lista.
     * @param i el índice del elemento que queremos.
     * @return el <em>i</em>-ésimo elemento de la lista.
     * @throws ExcepcionIndiceInvalido si <em>i</em> es menor que cero o mayor o
     *         igual que el número de elementos en la lista.
     */
    public T get(int i) {
        if(i < 0 || i >= longitud) return null;
	int cont = 0;
	Nodo aux = cabeza;
	while (cont < i){
	    aux = aux.siguiente;
	    cont ++;
	}
       return aux.get();
	
	
    }
    /**
     * Agrega un elemento al inicio de la lista. Si la lista no tiene elementos,
     * el elemento a agregar será el primero y último.
     * @param elemento el elemento a agregar.
     * @throws IllegalArgumentException si <code>elemento</code> es
     *         <code>null</code>.
     */
    public void agregaInicio(T elemento) {
	if(elemento == null) throw new IllegalArgumentException("Elemento null");
	Nodo nodo = new Nodo(elemento);
	if(esVacia()) cabeza = rabo = nodo;
	else{
	    nodo.siguiente = cabeza;
	    cabeza.anterior = nodo;
	    cabeza = nodo;
	}
	longitud++;
    }
    

    /**
     * Agrega un elemento al final de la lista. Si la lista no tiene elementos,
     * el elemento a agregar será el primero y último.
     * @param elemento el elemento a agregar.
     * @throws IllegalArgumentException si <code>elemento</code> es
     *         <code>null</code>.
     */
    public void agregaFinal(T elemento) {
	if(elemento == null) throw new IllegalArgumentException("Elemento null");
	Nodo nodo = new Nodo(elemento);
	if(esVacia()) cabeza = rabo = nodo;
        else{
	    nodo.anterior = rabo;
	    rabo.siguiente = nodo;
	    rabo = nodo;
        }
        longitud++;
    }

    
    
    /**
     * Inserta un elemento en un índice explícito.
     *
     * Si el índice es menor o igual que cero, el elemento se agrega al inicio
     * de la lista. Si el índice es mayor o igual que el número de elementos en
     * la lista, el elemento se agrega al fina de la misma. En otro caso,
     * después de mandar llamar el método, el elemento tendrá el índice que se
     * especifica en la lista.
     * @param i el índice dónde insertar el elemento. Si es menor que 0 el
     *          elemento se agrega al inicio de la lista, y si es mayor o igual
     *          que el número de elementos en la lista se agrega al final.
     * @param elemento el elemento a insertar.
     * @throws IllegalArgumentException si <code>elemento</code> es
     *         <code>null</code>.
     */
    public void inserta(int i, T elemento) {
        if(elemento == null) throw new IllegalArgumentException("Elemento null");
        else if(i <= 0) agregaInicio(elemento);
        else if(longitud <= i) agregaFinal(elemento);
        else{    
	    Nodo nuevo = new Nodo(elemento);
	    int cont = 0;
	    Nodo aux = cabeza;
	    while (cont < i-1){
		cont++;
		aux = aux.siguiente;
	    }
	    nuevo.siguiente = aux.siguiente;
	    aux.siguiente = nuevo;
	    longitud++;
        }
    }
    
    public void limpia() {
        cabeza = rabo = null;
        longitud = 0;
    }

    /**
     * Elimina el primer elemento de la lista y lo regresa.
     * @return el primer elemento de la lista antes de eliminarlo.
     * @throws NoSuchElementException si la lista es vacía.
     */
    public T eliminaPrimero() {
        if(esVacia())  throw new NoSuchElementException("Lista Vacía");
        Nodo eliminado = cabeza;
        if(longitud == 1) limpia();
        else{
	    cabeza = cabeza.siguiente;
	    cabeza.anterior = null;
	    longitud--;
        }
        return eliminado.elemento;
    }
    
    /**
     * Elimina el último elemento de la lista y lo regresa.
     * @return el último elemento de la lista antes de eliminarlo.
     * @throws NoSuchElementException si la lista es vacía.
     */
    public T eliminaUltimo() {
        if(esVacia()) throw new NoSuchElementException("Lista Vacía");
        Nodo eliminado = rabo;
        if(longitud == 1) limpia();
        else{
	    rabo = rabo.anterior;
	    rabo.siguiente = null;
	    longitud--;
        }
        return eliminado.elemento;
    }
    
    /**
     * Elimina un elemento en la posición especificada de la lista, desplazando 
     * todos los demás elementos.
     * 
     * @param indice La posición donde se eliminará el objeto. La posición debe
     *               ser mayor o igual a cero, y menor al tamaño de la lista.
     */
    public void elimina(int indice){
	if ( indice < 0 && indice > longitud) return;
	if(indice==0) {eliminaPrimero(); return;}
	
	int cont = 0;
	Nodo elim = cabeza;
	while (cont < indice-1){
	    elim = elim.siguiente;
	    cont++;
	}
	elim.siguiente = elim.siguiente.siguiente;
	longitud--;
	
    }

    /** Dado un sueldo y un puesto, encontrar los empleados que ocupan dicho puesto.
     * y que que su sueldo sea menor.
     * @param puesto el puesto del empleado.
     * @param sueldo el sueldo de dicho empleado
     */    
    
    public String toString() {
        if(esVacia()) return "[]";
        String s = "[";
        for (int i = 0; i < longitud-1; i++)
            s += String.format("%s, ", get(i));
        s += String.format("%s]", get(longitud-1));
        return s;
    }
    
    
    /**
     * Regresa el nodo cabeza de la lista.
     * @return el nodo cabeza de la lista.
     */
    public Nodo getCabeza() {
        return cabeza;
    }

    /**
     * Regresa el nodo rabo de la lista.
     * @return el nodo rabo de la lista.
     */
    public Nodo getRabo() {
        return rabo;
    }
    
    
    
}

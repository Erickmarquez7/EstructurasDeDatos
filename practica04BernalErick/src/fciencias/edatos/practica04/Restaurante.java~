//Erick Bernal Márquez        317042522
//Practica 4                  Nov/2020

package fciencias.edatos.practica04;
/*import java.io.Serializable;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.io.FileInputStream;
import java.io.ObjectInputStream;*/
import java.io.IOException;
import java.io.Reader;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.Writer;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.util.Scanner;
import java.util.Random;

public class Restaurante {

    //EL Número de mesas
    static int nMesas;
    //arreglo de mesas
    static Mesa[] mesas;
    //cola para los clientes
    static Cola<Cliente> clientes = new Cola<Cliente>();
    //dia
    static int dia;

    //método para ordenar el arreglo
    public static void selectionSort(Mesa[] arreglo) {
	//la primera posicion
	int m;
	for(int i = 0; i<arreglo.length; i++){
	    //la siguiente
            m = i;
            for(int j = i+1; j<arreglo.length; j++){
		if(arreglo[j].getCapacidad()<arreglo[m].getCapacidad())
		    m = j;
            }
            intercambia(arreglo, i, m);
	}
    }
    
    private static void intercambia(Mesa[] arreglo, int pos1, int pos2){
	//temporal
        Mesa mesaTemp = arreglo[pos1];
        arreglo[pos1] = arreglo[pos2];
        arreglo[pos2] = mesaTemp;
    }
    

    public static void guarda(){
	BufferedWriter bw = null;
	try{
	    FileWriter w = new FileWriter("dias.txt");
	    bw = new BufferedWriter(w);
	    bw.write(""+dia);
	}catch(Exception e){
	    System.out.println("Algo salió mal");
	}finally{
	    try{
		bw.close();
	    }catch(Exception e){
		System.out.println();
	    }
	}
    }

    public static void lee(){
	BufferedReader br = null;
	try{
	    FileReader r = new FileReader("dias.txt");
	    br = new BufferedReader(r);
	    
	    String linea = br.readLine();
	    dia = Integer.parseInt(linea);
	    //siguiente linea
	    linea = br.readLine();

	    System.out.println("Días abiertos: " +dia);
	    
	}catch(FileNotFoundException flne){
	    System.out.println("Primer dìa abierto");
	}catch(Exception e){
	    System.out.println("Algo salió mal");
	}finally{
	    try{
	    br.close();
	    }catch(Exception cmodin){
	    }
	}
    }    
    
    public static void main(String[] args){
	
	Scanner sc = new Scanner(System.in);
	Random rn = new Random();
	
	//Incio
   	System.out.println("Bienvenido al restaurante Chefsito\nPara empezar seleccione el número de mesas. Las mesas se van a ordenar de menor a mayor para aprovechar al máximo su capacidad.");
	lee();
	dia++;
	
   	//Estos BLOQUES son para verificar que sea un numero
	while(!sc.hasNextInt()){
	    System.out.println("No es un número");
	    sc.next();
	}
	
	//Declaración de mesas
	nMesas = sc.nextInt();
	mesas = new Mesa[nMesas];

	//creacion y asignación de mesas
	for (int i = 0; i<nMesas; i++){
	    mesas[i] = new Mesa("Mesa "+ i);
	}
	
	System.out.println("Se registraron "+ nMesas +" mesas.\nSeleccione la capacidad de las mesas\n");
	
	//Asiganción de asientos
	for(int i=0; i<nMesas; i++){
	    System.out.println("Lugares para la mesa "+ ""+i+".");
	    
	    //BLOQUE
	    while(!sc.hasNextInt()){
		System.out.println("No es un número");
		sc.next();
	    }
	    mesas[i].capacidad = sc.nextInt();        
	}
	

	System.out.println("La disposición de las mesas es la siguiente");
	
	//oredenar arreglo
	selectionSort(mesas);
	
	for(int i = 0; i<nMesas; i++){
	    System.out.println(mesas[i].getNombre() + " tiene una capacidad de "+mesas[i].getCapacidad());
	}
	//hasta aqui el inicio de las mesas

	System.out.println("¿Cuantos clientes son en total?");
	
	//BLOQUE
	while(!sc.hasNextInt()){
	    System.out.println("No es un número");
	    sc.next();
	}

	int nClientes=sc.nextInt();

	//crea clientes
	for(int c=0; c<nClientes;c++){
	    System.out.println("¿Cuál es su nombre?");
	    String nombre = sc.next();
	    System.out.println("\n¿Cuántos son sus acompañantes en total?");
	    //BLOQUE
	    while(!sc.hasNextInt()){
		System.out.println("No es un número");
		sc.next();
	    }
	    
	    int personas = sc.nextInt();
	    
	    Cliente nuevo = new Cliente(nombre, personas);
	    //tiempo que se va a tardar cada personas
	    int tiempo = 1+rn.nextInt(10);
	    //tiempo total
	    nuevo.setTiempo(tiempo*nuevo.getPersonas());
	    clientes.enqueue(nuevo);

	}
	
	
	

	do{
	    System.out.println("\nOpciones para el restaurante\n1.-Cliente nuevo.\n2.-Ver cola de clientes\n3.-Ver mesas\n4.-Cerrar restaurante");
	    
	    //BLOQUE
	    while(!sc.hasNextInt()){
		System.out.println("No es un número");
		sc.next();
	    }
	    int op = sc.nextInt();

	    switch(op){
	    case 1:
		System.out.println("Nombre del cliente: ");
		String nombre = sc.next();
		
		System.out.println("Numero de personas: ");
		while(!sc.hasNextInt()){
		    System.out.println("No es un número");
		    sc.next();
		}
		int personas = sc.nextInt();

		
		//creamos cliente
		Cliente espera = new Cliente(nombre, personas);
		espera.tiempo = rn.nextInt();
		//lo añadimos a la cola
		clientes.enqueue(espera);
		//recorremos las mesas para asignar lugar
		for(int i=0;i<nMesas;i++){
		    //el maximo numero de asientos que todas las mesas disponen
		    int maximo=0;
		    if(mesas[i].getCapacidad()>=maximo) maximo=mesas[i].getCapacidad();
		    //si las personas del acompañante son menores que el acompañante entonces será antendido, si son mayores pues no xd
		    if(espera.getPersonas()<=maximo){
			
			//si está disponible y las personas sean menores o guales a la capacidad
			if(mesas[i].getDispo() && espera.getPersonas()<=mesas[i].getCapacidad()){
			    //se quita en la cola
			    clientes.dequeue();
			    //se asigna a la mesa
			    mesas[i].setComensales(espera.getPersonas());
			    mesas[i].setNombre(espera.getNombre());
			    //y solito se pone ocupada
			    //el tiempo de espera
			    espera.tiempo=rn.nextInt();
			    break;
			//   el else es nada mas para que se lo salte y no haga nada
			}else {	}//fue atendido y verificò la dispo y las personas
		    }else {clientes.dequeue();}//no fue atendido, lo quita de la cola
		} System.out.println("Verificando...\nSi el cliente tiene mas acompañantes que las mesas disponen entonces no será atendido, en caso contrario pronto lo atendermos.\nGracias");
		
		break;
		
	    case 2:
		clientes.muestra();
		break;

	    case 3:
		for(int m = 0; m<nMesas; m++){
		    System.out.println(mesas[m]);
		}

		break;
		
	    case 4:
		if(!clientes.isEmpty()){
		    System.out.println("Hay clientes en espera");
		    clientes.muestra();
		    break;
		}else {
		    guarda();
		    return;
		}

	    default:
		System.out.println("Opción inválida");
		continue;

	    }

	}while(true);
    }
}

